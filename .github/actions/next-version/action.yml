name: Determine Next Version
inputs:
  currentBranch:
    description: 'Branch name'
    required: true
  versionFilePath:
    description: 'Path to the version.txt'
    required: true
  shouldIncrementMajor:
    description: 'Increment the major version'
    required: true
    default: 'false'
  shouldIncrementMinor:
    description: 'Increment the minor version'
    required: true
    default: 'false'
outputs:
  newVersionNumber:
    description: 'The new version'
    value: ${{ steps.version.outputs.newVersionNumber }}
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Determine next version
      id: version
      shell: pwsh
      run: |
        function Get-NextVersion {
            param(
                [string]$currentVersion,
                [string]$branch,
                [bool]$incrementMajor,
                [bool]$incrementMinor
            )
            
            Write-Host "`n=== Processing version: $currentVersion on branch: $branch ==="
            Write-Host "Increment major: $incrementMajor, Increment minor: $incrementMinor`n"

            $versionParts = $currentVersion.Split('.')
            $major = [int]$versionParts[0]
            $minor = [int]$versionParts[1]
            $patch = [int]$versionParts[2]
            $revision = if ($versionParts.Count -gt 3) { [int]$versionParts[3] } else { 0 }

            Write-Host "Current version parts:"
            Write-Host "Major: $major"
            Write-Host "Minor: $minor"
            Write-Host "Patch: $patch"
            Write-Host "Revision: $revision`n"

            if ($branch -eq "main" -or $branch -eq "master") {
                Write-Host "MAIN/MASTER branch detected"
                if ($incrementMajor) {
                    Write-Host "MAJOR version increment requested"
                    $major++
                    $minor = 0
                    $patch = 0
                    $revision = 0
                }
                elseif ($incrementMinor) {
                    Write-Host "MINOR version increment requested"
                    $minor++
                    $patch = 0
                    $revision = 0
                }
                else {
                    Write-Host "PATCH version increment requested (default)"
                    $patch++
                    $revision = 0
                }
                $newVersion = "$major.$minor.$patch.0"
            }
            elseif ($branch -like "release/*") {
                Write-Host "RELEASE branch detected"
                $revision++
                $newVersion = "$major.$minor.$patch.$revision"
            }
            else {
                Write-Host "Non-main/master, non-release branch detected. Version remains unchanged."
                if ($currentVersion -match '\.\d+$') {
                    $parts = $currentVersion.Split('.')
                    $rev = [int]$parts[-1]
                    $newVersion = "$($parts[0]).$($parts[1]).$($parts[2]).$rev"
                } else {
                    # Add .0 if no revision exists
                    $newVersion = "$currentVersion.0"
                }
            }

            Write-Host "`nNew version parts:"
            Write-Host "Major: $major"
            Write-Host "Minor: $minor"
            Write-Host "Patch: $patch"
            Write-Host "Revision: $($newVersion.Split('.')[3])"
            Write-Host "Final version: $newVersion`n"

            return $newVersion
        }

        Write-Host "=== DEBUG INPUT VALUES ==="
        Write-Host "Current branch: ${{ inputs.currentBranch }}"
        Write-Host "Version file path: ${{ inputs.versionFilePath }}"
        Write-Host "Increment major: ${{ inputs.shouldIncrementMajor }}"
        Write-Host "Increment minor: ${{ inputs.shouldIncrementMinor }}"
        Write-Host "=========================`n"

        $versionFilePath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ inputs.versionFilePath }}"
        Write-Host "Looking for version file at: $versionFilePath`n"
        
        if (-not (Test-Path -Path $versionFilePath)) {
            Write-Error "Version file not found at $versionFilePath"
            exit 1
        }

        $currentVersion = (Get-Content -Path $versionFilePath -Raw).Trim()
        Write-Host "Current version from file: '$currentVersion'`n"

        $incMajor = "${{ inputs.shouldIncrementMajor }}" -eq 'true'
        $incMinor = "${{ inputs.shouldIncrementMinor }}" -eq 'true'
        $branch = "${{ inputs.currentBranch }}"

        Write-Host "Calculating next version with:"
        Write-Host "- Branch: $branch"
        Write-Host "- Increment major: $incMajor"
        Write-Host "- Increment minor: $incMinor`n"

        $newVersion = Get-NextVersion -currentVersion $currentVersion -branch $branch -incrementMajor $incMajor -incrementMinor $incMinor
        Write-Host "Final new version: '$newVersion'`n"

        Set-Content -Path $versionFilePath -Value $newVersion -NoNewline
        Write-Host "Version file updated successfully`n"

        echo "newVersionNumber=$newVersion" >> $env:GITHUB_OUTPUT
        Write-Host "Output variable set: newVersionNumber=$newVersion`n"