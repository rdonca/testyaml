name: TEST Next version
description: Test new build flow.

on:
  workflow_dispatch:
    inputs:
      incrementMajor:
        description: 'Increment MAJOR'
        required: true
        default: 'false'
        type: choice
        options:
          - true
          - false
      incrementMinor:
        description: 'Increment MINOR'
        required: true
        default: 'false'
        type: choice
        options:
          - true
          - false
    
env:
  DOTNET_NOLOGO: true                     # Disable the .NET logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry
  
jobs:
  determine_env:
    runs-on: ubuntu-latest
    name: Determine the Environment
    outputs:
      environment: ${{ steps.set-env.outputs.ENVIRONMENT }}
    steps:
      - name: Set environment variable based on branch
        id: set-env
        run: |
          # Assumes deployment branch rules in GitHub
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT

  print_build_type:
    runs-on: ubuntu-latest
    name: Print the build type, based on the environment
    needs: determine_env
    environment: ${{ needs.determine_env.outputs.environment }}
    steps:
      - name: Print the Environment and Build Type
        run: |
          echo "Environment: ${{ needs.determine_env.outputs.environment }}"
          echo "Build Type: ${{ vars.BUILD_TYPE }}"
          
  build-windows:
    runs-on: windows-2019
    permissions:
      contents: write
    name: Windows Build Self-Hosted
    needs: determine_env
    environment: ${{ needs.determine_env.outputs.environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Calculate new version
      uses: ./.github/actions/next-version
      id: calculate-version
      with:
        currentBranch: ${{ github.ref_name }}
        versionFilePath: version.txt
        shouldIncrementMajor: false
        shouldIncrementMinor: false
    
    - name: Show the determined version
      run: echo "New version is ${{ steps.calculate-version.outputs.newVersionNumber }}"
      shell: pwsh

    - name: Update version file
      shell: pwsh
      run: |
        $versionFilePath = "$env:GITHUB_WORKSPACE/version.txt"
        $newVersion = "${{ steps.calculate-version.outputs.newVersionNumber }}"
        Set-Content -Path $versionFilePath -Value $newVersion -NoNewline
        Write-Output "Updated version.txt with: $newVersion"

    - name: Commit version update
      id: commit-version
      shell: pwsh
      run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Stage the version file
          git add version.txt
          
          # Check if there are changes to commit
          $changes = git status --porcelain
          if ($changes) {
            git commit -m "Bump version to ${{ steps.calculate-version.outputs.newVersionNumber }} [skip ci]"
            git push origin HEAD:${{ github.ref_name }}
            Write-Host "::set-output name=committed::true"
          } else {
            Write-Host "::set-output name=committed::false"
            Write-Host "No changes to commit"
          }
  
    - name: Output commit status
      shell: pwsh
      run: |
          if ("${{ steps.commit-version.outputs.committed }}" -eq "true") {
            Write-Host "Version file was committed and pushed"
          } else {
            Write-Host "No changes were committed"
          }

    - name: Create and push version tag
      if: success()  # Only tag if commit succeeded
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        $newVersion = "${{ steps.calculate-version.outputs.newVersionNumber }}"
        
        # Create annotated tag (better practice than lightweight)
        git tag -a "v$newVersion" -m "Version $newVersion"
        
        # Push the tag
        git push origin "v$newVersion"
        
        Write-Host "Successfully created and pushed tag v$newVersion"